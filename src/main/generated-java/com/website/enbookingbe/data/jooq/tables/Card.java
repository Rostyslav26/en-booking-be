/*
 * This file is generated by jOOQ.
 */
package com.website.enbookingbe.data.jooq.tables;


import com.website.enbookingbe.data.jooq.Keys;
import com.website.enbookingbe.data.jooq.Public;
import com.website.enbookingbe.data.jooq.tables.records.CardRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Card extends TableImpl<CardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.card</code>
     */
    public static final Card CARD = new Card();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardRecord> getRecordType() {
        return CardRecord.class;
    }

    /**
     * The column <code>public.card.id</code>.
     */
    public final TableField<CardRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.card.question</code>.
     */
    public final TableField<CardRecord, String> QUESTION = createField(DSL.name("question"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.card.answer</code>.
     */
    public final TableField<CardRecord, String> ANSWER = createField(DSL.name("answer"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.card.author_id</code>.
     */
    public final TableField<CardRecord, Integer> AUTHOR_ID = createField(DSL.name("author_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.card.created_at</code>.
     */
    public final TableField<CardRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.card.updated_at</code>.
     */
    public final TableField<CardRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    private Card(Name alias, Table<CardRecord> aliased) {
        this(alias, aliased, null);
    }

    private Card(Name alias, Table<CardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.card</code> table reference
     */
    public Card(String alias) {
        this(DSL.name(alias), CARD);
    }

    /**
     * Create an aliased <code>public.card</code> table reference
     */
    public Card(Name alias) {
        this(alias, CARD);
    }

    /**
     * Create a <code>public.card</code> table reference
     */
    public Card() {
        this(DSL.name("card"), null);
    }

    public <O extends Record> Card(Table<O> child, ForeignKey<O, CardRecord> key) {
        super(child, key, CARD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CardRecord, Integer> getIdentity() {
        return (Identity<CardRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CardRecord> getPrimaryKey() {
        return Keys.CARD_PKEY;
    }

    @Override
    public List<ForeignKey<CardRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CARD__CARD_AUTHOR_ID_FKEY);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.CARD__CARD_AUTHOR_ID_FKEY);

        return _user;
    }

    @Override
    public Card as(String alias) {
        return new Card(DSL.name(alias), this);
    }

    @Override
    public Card as(Name alias) {
        return new Card(alias, this);
    }

    @Override
    public Card as(Table<?> alias) {
        return new Card(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(String name) {
        return new Card(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(Name name) {
        return new Card(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(Table<?> name) {
        return new Card(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super String, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super String, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
