/*
 * This file is generated by jOOQ.
 */
package com.website.enbookingbe.data.jooq.tables;


import com.website.enbookingbe.data.jooq.Keys;
import com.website.enbookingbe.data.jooq.Public;
import com.website.enbookingbe.data.jooq.tables.records.QuizCardRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuizCard extends TableImpl<QuizCardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.quiz_card</code>
     */
    public static final QuizCard QUIZ_CARD = new QuizCard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuizCardRecord> getRecordType() {
        return QuizCardRecord.class;
    }

    /**
     * The column <code>public.quiz_card.quiz_id</code>.
     */
    public final TableField<QuizCardRecord, Integer> QUIZ_ID = createField(DSL.name("quiz_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.quiz_card.card_id</code>.
     */
    public final TableField<QuizCardRecord, Integer> CARD_ID = createField(DSL.name("card_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.quiz_card.status</code>.
     */
    public final TableField<QuizCardRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(15), this, "");

    private QuizCard(Name alias, Table<QuizCardRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuizCard(Name alias, Table<QuizCardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.quiz_card</code> table reference
     */
    public QuizCard(String alias) {
        this(DSL.name(alias), QUIZ_CARD);
    }

    /**
     * Create an aliased <code>public.quiz_card</code> table reference
     */
    public QuizCard(Name alias) {
        this(alias, QUIZ_CARD);
    }

    /**
     * Create a <code>public.quiz_card</code> table reference
     */
    public QuizCard() {
        this(DSL.name("quiz_card"), null);
    }

    public <O extends Record> QuizCard(Table<O> child, ForeignKey<O, QuizCardRecord> key) {
        super(child, key, QUIZ_CARD);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<QuizCardRecord> getPrimaryKey() {
        return Keys.QUIZ_CARD_PKEY;
    }

    @Override
    public List<ForeignKey<QuizCardRecord, ?>> getReferences() {
        return Arrays.asList(Keys.QUIZ_CARD__QUIZ_CARD_QUIZ_ID_FKEY, Keys.QUIZ_CARD__QUIZ_CARD_CARD_ID_FKEY);
    }

    private transient Quiz _quiz;
    private transient Card _card;

    /**
     * Get the implicit join path to the <code>public.quiz</code> table.
     */
    public Quiz quiz() {
        if (_quiz == null)
            _quiz = new Quiz(this, Keys.QUIZ_CARD__QUIZ_CARD_QUIZ_ID_FKEY);

        return _quiz;
    }

    /**
     * Get the implicit join path to the <code>public.card</code> table.
     */
    public Card card() {
        if (_card == null)
            _card = new Card(this, Keys.QUIZ_CARD__QUIZ_CARD_CARD_ID_FKEY);

        return _card;
    }

    @Override
    public QuizCard as(String alias) {
        return new QuizCard(DSL.name(alias), this);
    }

    @Override
    public QuizCard as(Name alias) {
        return new QuizCard(alias, this);
    }

    @Override
    public QuizCard as(Table<?> alias) {
        return new QuizCard(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizCard rename(String name) {
        return new QuizCard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizCard rename(Name name) {
        return new QuizCard(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuizCard rename(Table<?> name) {
        return new QuizCard(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
